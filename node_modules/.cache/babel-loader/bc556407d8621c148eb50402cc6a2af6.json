{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { AWS_CLOUDWATCH_CATEGORY } from '../Util/Constants';\nvar LOG_LEVELS = {\n  VERBOSE: 1,\n  DEBUG: 2,\n  INFO: 3,\n  WARN: 4,\n  ERROR: 5\n};\nexport var LOG_TYPE;\n\n(function (LOG_TYPE) {\n  LOG_TYPE[\"DEBUG\"] = \"DEBUG\";\n  LOG_TYPE[\"ERROR\"] = \"ERROR\";\n  LOG_TYPE[\"INFO\"] = \"INFO\";\n  LOG_TYPE[\"WARN\"] = \"WARN\";\n  LOG_TYPE[\"VERBOSE\"] = \"VERBOSE\";\n})(LOG_TYPE || (LOG_TYPE = {}));\n/**\n * Write logs\n * @class Logger\n */\n\n\nvar ConsoleLogger = function () {\n  /**\n   * @constructor\n   * @param {string} name - Name of the logger\n   */\n  function ConsoleLogger(name, level) {\n    if (level === void 0) {\n      level = LOG_TYPE.WARN;\n    }\n\n    this.name = name;\n    this.level = level;\n    this._pluggables = [];\n  }\n\n  ConsoleLogger.prototype._padding = function (n) {\n    return n < 10 ? '0' + n : '' + n;\n  };\n\n  ConsoleLogger.prototype._ts = function () {\n    var dt = new Date();\n    return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(':') + '.' + dt.getMilliseconds();\n  };\n\n  ConsoleLogger.prototype.configure = function (config) {\n    if (!config) return this._config;\n    this._config = config;\n    return this._config;\n  };\n  /**\n   * Write log\n   * @method\n   * @memeberof Logger\n   * @param {LOG_TYPE|string} type - log type, default INFO\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype._log = function (type) {\n    var e_1, _a;\n\n    var msg = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      msg[_i - 1] = arguments[_i];\n    }\n\n    var logger_level_name = this.level;\n\n    if (ConsoleLogger.LOG_LEVEL) {\n      logger_level_name = ConsoleLogger.LOG_LEVEL;\n    }\n\n    if (typeof window !== 'undefined' && window.LOG_LEVEL) {\n      logger_level_name = window.LOG_LEVEL;\n    }\n\n    var logger_level = LOG_LEVELS[logger_level_name];\n    var type_level = LOG_LEVELS[type];\n\n    if (!(type_level >= logger_level)) {\n      // Do nothing if type is not greater than or equal to logger level (handle undefined)\n      return;\n    }\n\n    var log = console.log.bind(console);\n\n    if (type === LOG_TYPE.ERROR && console.error) {\n      log = console.error.bind(console);\n    }\n\n    if (type === LOG_TYPE.WARN && console.warn) {\n      log = console.warn.bind(console);\n    }\n\n    var prefix = \"[\" + type + \"] \" + this._ts() + \" \" + this.name;\n    var message = '';\n\n    if (msg.length === 1 && typeof msg[0] === 'string') {\n      message = prefix + \" - \" + msg[0];\n      log(message);\n    } else if (msg.length === 1) {\n      message = prefix + \" \" + msg[0];\n      log(prefix, msg[0]);\n    } else if (typeof msg[0] === 'string') {\n      var obj = msg.slice(1);\n\n      if (obj.length === 1) {\n        obj = obj[0];\n      }\n\n      message = prefix + \" - \" + msg[0] + \" \" + obj;\n      log(prefix + \" - \" + msg[0], obj);\n    } else {\n      message = prefix + \" \" + msg;\n      log(prefix, msg);\n    }\n\n    try {\n      for (var _b = __values(this._pluggables), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var plugin = _c.value;\n        var logEvent = {\n          message: message,\n          timestamp: Date.now()\n        };\n        plugin.pushLogs([logEvent]);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  /**\n   * Write General log. Default to INFO\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.log = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spread([LOG_TYPE.INFO], msg));\n  };\n  /**\n   * Write INFO log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.info = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spread([LOG_TYPE.INFO], msg));\n  };\n  /**\n   * Write WARN log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.warn = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spread([LOG_TYPE.WARN], msg));\n  };\n  /**\n   * Write ERROR log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.error = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spread([LOG_TYPE.ERROR], msg));\n  };\n  /**\n   * Write DEBUG log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.debug = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spread([LOG_TYPE.DEBUG], msg));\n  };\n  /**\n   * Write VERBOSE log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.verbose = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spread([LOG_TYPE.VERBOSE], msg));\n  };\n\n  ConsoleLogger.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {\n      this._pluggables.push(pluggable);\n\n      pluggable.configure(this._config);\n    }\n  };\n\n  ConsoleLogger.prototype.listPluggables = function () {\n    return this._pluggables;\n  };\n\n  ConsoleLogger.LOG_LEVEL = null;\n  return ConsoleLogger;\n}();\n\nexport { ConsoleLogger };","map":{"version":3,"sources":["../../src/Logger/ConsoleLogger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport { AWS_CLOUDWATCH_CATEGORY } from '../Util/Constants';\nvar LOG_LEVELS = {\n    VERBOSE: 1,\n    DEBUG: 2,\n    INFO: 3,\n    WARN: 4,\n    ERROR: 5,\n};\nexport var LOG_TYPE;\n(function (LOG_TYPE) {\n    LOG_TYPE[\"DEBUG\"] = \"DEBUG\";\n    LOG_TYPE[\"ERROR\"] = \"ERROR\";\n    LOG_TYPE[\"INFO\"] = \"INFO\";\n    LOG_TYPE[\"WARN\"] = \"WARN\";\n    LOG_TYPE[\"VERBOSE\"] = \"VERBOSE\";\n})(LOG_TYPE || (LOG_TYPE = {}));\n/**\n * Write logs\n * @class Logger\n */\nvar ConsoleLogger = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {string} name - Name of the logger\n     */\n    function ConsoleLogger(name, level) {\n        if (level === void 0) { level = LOG_TYPE.WARN; }\n        this.name = name;\n        this.level = level;\n        this._pluggables = [];\n    }\n    ConsoleLogger.prototype._padding = function (n) {\n        return n < 10 ? '0' + n : '' + n;\n    };\n    ConsoleLogger.prototype._ts = function () {\n        var dt = new Date();\n        return ([this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(':') +\n            '.' +\n            dt.getMilliseconds());\n    };\n    ConsoleLogger.prototype.configure = function (config) {\n        if (!config)\n            return this._config;\n        this._config = config;\n        return this._config;\n    };\n    /**\n     * Write log\n     * @method\n     * @memeberof Logger\n     * @param {LOG_TYPE|string} type - log type, default INFO\n     * @param {string|object} msg - Logging message or object\n     */\n    ConsoleLogger.prototype._log = function (type) {\n        var e_1, _a;\n        var msg = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            msg[_i - 1] = arguments[_i];\n        }\n        var logger_level_name = this.level;\n        if (ConsoleLogger.LOG_LEVEL) {\n            logger_level_name = ConsoleLogger.LOG_LEVEL;\n        }\n        if (typeof window !== 'undefined' && window.LOG_LEVEL) {\n            logger_level_name = window.LOG_LEVEL;\n        }\n        var logger_level = LOG_LEVELS[logger_level_name];\n        var type_level = LOG_LEVELS[type];\n        if (!(type_level >= logger_level)) {\n            // Do nothing if type is not greater than or equal to logger level (handle undefined)\n            return;\n        }\n        var log = console.log.bind(console);\n        if (type === LOG_TYPE.ERROR && console.error) {\n            log = console.error.bind(console);\n        }\n        if (type === LOG_TYPE.WARN && console.warn) {\n            log = console.warn.bind(console);\n        }\n        var prefix = \"[\" + type + \"] \" + this._ts() + \" \" + this.name;\n        var message = '';\n        if (msg.length === 1 && typeof msg[0] === 'string') {\n            message = prefix + \" - \" + msg[0];\n            log(message);\n        }\n        else if (msg.length === 1) {\n            message = prefix + \" \" + msg[0];\n            log(prefix, msg[0]);\n        }\n        else if (typeof msg[0] === 'string') {\n            var obj = msg.slice(1);\n            if (obj.length === 1) {\n                obj = obj[0];\n            }\n            message = prefix + \" - \" + msg[0] + \" \" + obj;\n            log(prefix + \" - \" + msg[0], obj);\n        }\n        else {\n            message = prefix + \" \" + msg;\n            log(prefix, msg);\n        }\n        try {\n            for (var _b = __values(this._pluggables), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var plugin = _c.value;\n                var logEvent = { message: message, timestamp: Date.now() };\n                plugin.pushLogs([logEvent]);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    /**\n     * Write General log. Default to INFO\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    ConsoleLogger.prototype.log = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, __spread([LOG_TYPE.INFO], msg));\n    };\n    /**\n     * Write INFO log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    ConsoleLogger.prototype.info = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, __spread([LOG_TYPE.INFO], msg));\n    };\n    /**\n     * Write WARN log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    ConsoleLogger.prototype.warn = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, __spread([LOG_TYPE.WARN], msg));\n    };\n    /**\n     * Write ERROR log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    ConsoleLogger.prototype.error = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, __spread([LOG_TYPE.ERROR], msg));\n    };\n    /**\n     * Write DEBUG log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    ConsoleLogger.prototype.debug = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, __spread([LOG_TYPE.DEBUG], msg));\n    };\n    /**\n     * Write VERBOSE log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    ConsoleLogger.prototype.verbose = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, __spread([LOG_TYPE.VERBOSE], msg));\n    };\n    ConsoleLogger.prototype.addPluggable = function (pluggable) {\n        if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {\n            this._pluggables.push(pluggable);\n            pluggable.configure(this._config);\n        }\n    };\n    ConsoleLogger.prototype.listPluggables = function () {\n        return this._pluggables;\n    };\n    ConsoleLogger.LOG_LEVEL = null;\n    return ConsoleLogger;\n}());\nexport { ConsoleLogger };\n//# sourceMappingURL=ConsoleLogger.js.map"]},"metadata":{},"sourceType":"module"}