{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { CloudWatchLogsClient, CreateLogGroupCommand, CreateLogStreamCommand, DescribeLogGroupsCommand, DescribeLogStreamsCommand, GetLogEventsCommand, PutLogEventsCommand } from '@aws-sdk/client-cloudwatch-logs';\nimport { Credentials } from '../..';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { getAmplifyUserAgent } from '../Platform';\nimport { parseMobileHubConfig } from '../Parser';\nimport { AWS_CLOUDWATCH_BASE_BUFFER_SIZE, AWS_CLOUDWATCH_CATEGORY, AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE, AWS_CLOUDWATCH_MAX_EVENT_SIZE, AWS_CLOUDWATCH_PROVIDER_NAME, NO_CREDS_ERROR_STRING, RETRY_ERROR_CODES } from '../Util/Constants';\nvar logger = new Logger('AWSCloudWatch');\n\nvar AWSCloudWatchProvider = function () {\n  function AWSCloudWatchProvider(config) {\n    this.configure(config);\n    this._dataTracker = {\n      eventUploadInProgress: false,\n      logEvents: []\n    };\n    this._currentLogBatch = [];\n\n    this._initiateLogPushInterval();\n  }\n\n  AWSCloudWatchProvider.prototype.getProviderName = function () {\n    return AWSCloudWatchProvider.PROVIDER_NAME;\n  };\n\n  AWSCloudWatchProvider.prototype.getCategoryName = function () {\n    return AWSCloudWatchProvider.CATEGORY;\n  };\n\n  AWSCloudWatchProvider.prototype.getLogQueue = function () {\n    return this._dataTracker.logEvents;\n  };\n\n  AWSCloudWatchProvider.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    var conf = Object.assign({}, this._config, parseMobileHubConfig(config).Logging, config);\n    this._config = conf;\n    return this._config;\n  };\n\n  AWSCloudWatchProvider.prototype.createLogGroup = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('creating new log group in CloudWatch - ', params.logGroupName);\n            cmd = new CreateLogGroupCommand(params);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              logger.error(NO_CREDS_ERROR_STRING);\n              throw Error;\n            }\n\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 3:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 4:\n            error_1 = _a.sent();\n            logger.error(\"error creating log group - \" + error_1);\n            throw error_1;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogGroups = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting list of log groups');\n            cmd = new DescribeLogGroupsCommand(params);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              logger.error(NO_CREDS_ERROR_STRING);\n              throw Error;\n            }\n\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 3:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 4:\n            error_2 = _a.sent();\n            logger.error(\"error getting log group - \" + error_2);\n            throw error_2;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.createLogStream = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('creating new log stream in CloudWatch - ', params.logStreamName);\n            cmd = new CreateLogStreamCommand(params);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              logger.error(NO_CREDS_ERROR_STRING);\n              throw Error;\n            }\n\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 3:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 4:\n            error_3 = _a.sent();\n            logger.error(\"error creating log stream - \" + error_3);\n            throw error_3;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogStreams = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting list of log streams');\n            cmd = new DescribeLogStreamsCommand(params);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              logger.error(NO_CREDS_ERROR_STRING);\n              throw Error;\n            }\n\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 3:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 4:\n            error_4 = _a.sent();\n            logger.error(\"error getting log stream - \" + error_4);\n            throw error_4;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogEvents = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting log events from stream - ', params.logStreamName);\n            cmd = new GetLogEventsCommand(params);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              logger.error(NO_CREDS_ERROR_STRING);\n              throw Error;\n            }\n\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 3:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 4:\n            error_5 = _a.sent();\n            logger.error(\"error getting log events - \" + error_5);\n            throw error_5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.pushLogs = function (logs) {\n    logger.debug('pushing log events to Cloudwatch...');\n    this._dataTracker.logEvents = __spread(this._dataTracker.logEvents, logs);\n  };\n\n  AWSCloudWatchProvider.prototype._validateLogGroupExistsAndCreate = function (logGroupName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, currGroups, foundGroups, err_1, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._dataTracker.verifiedLogGroup) {\n              return [2\n              /*return*/\n              , this._dataTracker.verifiedLogGroup];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              logger.error(NO_CREDS_ERROR_STRING);\n              throw Error;\n            }\n\n            return [4\n            /*yield*/\n            , this.getLogGroups({\n              logGroupNamePrefix: logGroupName\n            })];\n\n          case 3:\n            currGroups = _a.sent();\n\n            if (!(typeof currGroups === 'string') && currGroups.logGroups) {\n              foundGroups = currGroups.logGroups.filter(function (group) {\n                return group.logGroupName === logGroupName;\n              });\n\n              if (foundGroups.length > 0) {\n                this._dataTracker.verifiedLogGroup = foundGroups[0];\n                return [2\n                /*return*/\n                , foundGroups[0]];\n              }\n            }\n            /**\n             * If we get to this point, it means that the specified log group does not exist\n             * and we should create it.\n             */\n\n\n            return [4\n            /*yield*/\n            , this.createLogGroup({\n              logGroupName: logGroupName\n            })];\n\n          case 4:\n            /**\n             * If we get to this point, it means that the specified log group does not exist\n             * and we should create it.\n             */\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 5:\n            err_1 = _a.sent();\n            errString = \"failure during log group search: \" + err_1;\n            logger.error(errString);\n            throw err_1;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._validateLogStreamExists = function (logGroupName, logStreamName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, currStreams, foundStreams, err_2, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              logger.error(NO_CREDS_ERROR_STRING);\n              throw Error;\n            }\n\n            return [4\n            /*yield*/\n            , this.getLogStreams({\n              logGroupName: logGroupName,\n              logStreamNamePrefix: logStreamName\n            })];\n\n          case 2:\n            currStreams = _a.sent();\n\n            if (currStreams.logStreams) {\n              foundStreams = currStreams.logStreams.filter(function (stream) {\n                return stream.logStreamName === logStreamName;\n              });\n\n              if (foundStreams.length > 0) {\n                this._nextSequenceToken = foundStreams[0].uploadSequenceToken;\n                return [2\n                /*return*/\n                , foundStreams[0]];\n              }\n            }\n            /**\n             * If we get to this point, it means that the specified stream does not\n             * exist, and we should create it now.\n             */\n\n\n            return [4\n            /*yield*/\n            , this.createLogStream({\n              logGroupName: logGroupName,\n              logStreamName: logStreamName\n            })];\n\n          case 3:\n            /**\n             * If we get to this point, it means that the specified stream does not\n             * exist, and we should create it now.\n             */\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 4:\n            err_2 = _a.sent();\n            errString = \"failure during log stream search: \" + err_2;\n            logger.error(errString);\n            throw err_2;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._sendLogEvents = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, cmd, client, output, err_3, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              logger.error(NO_CREDS_ERROR_STRING);\n              throw Error;\n            }\n\n            logger.debug('sending log events to stream - ', params.logStreamName);\n            cmd = new PutLogEventsCommand(params);\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 2:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 3:\n            err_3 = _a.sent();\n            errString = \"failure during log push: \" + err_3;\n            logger.error(errString);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._initCloudWatchLogs = function () {\n    return new CloudWatchLogsClient({\n      region: this._config.region,\n      credentials: this._config.credentials,\n      customUserAgent: getAmplifyUserAgent(),\n      endpoint: this._config.endpoint\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Credentials.get().then(function (credentials) {\n              if (!credentials) return false;\n              var cred = Credentials.shear(credentials);\n              logger.debug('set credentials for logging', cred);\n              _this._config.credentials = cred;\n              return true;\n            }).catch(function (error) {\n              logger.warn('ensure credentials error', error);\n              return false;\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._getNextSequenceToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var logStream, err_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._nextSequenceToken && this._nextSequenceToken.length > 0) {\n              return [2\n              /*return*/\n              , this._nextSequenceToken];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._validateLogGroupExistsAndCreate(this._config.logGroupName)];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this._validateLogStreamExists(this._config.logGroupName, this._config.logStreamName)];\n\n          case 3:\n            logStream = _a.sent();\n\n            if (!logStream) {\n              this._nextSequenceToken = '';\n              return [2\n              /*return*/\n              , ''];\n            }\n\n            this._nextSequenceToken = logStream.uploadSequenceToken || '';\n            return [2\n            /*return*/\n            , this._nextSequenceToken];\n\n          case 4:\n            err_4 = _a.sent();\n            logger.error(\"failure while getting next sequence token: \" + err_4);\n            throw err_4;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._safeUploadLogEvents = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var seqToken, logBatch, putLogsPayload, sendLogEventsResponse, err_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._getNextSequenceToken()];\n\n          case 1:\n            seqToken = _a.sent();\n            logBatch = this._currentLogBatch.length === 0 ? this._getBufferedBatchOfLogs() : this._currentLogBatch;\n            putLogsPayload = {\n              logGroupName: this._config.logGroupName,\n              logStreamName: this._config.logStreamName,\n              logEvents: logBatch,\n              sequenceToken: seqToken\n            };\n            this._dataTracker.eventUploadInProgress = true;\n            return [4\n            /*yield*/\n            , this._sendLogEvents(putLogsPayload)];\n\n          case 2:\n            sendLogEventsResponse = _a.sent();\n            this._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;\n            this._dataTracker.eventUploadInProgress = false;\n            this._currentLogBatch = [];\n            return [2\n            /*return*/\n            , sendLogEventsResponse];\n\n          case 3:\n            err_5 = _a.sent();\n            logger.error(\"error during _safeUploadLogEvents: \" + err_5);\n\n            if (RETRY_ERROR_CODES.includes(err_5.name)) {\n              this._getNewSequenceTokenAndSubmit({\n                logEvents: this._currentLogBatch,\n                logGroupName: this._config.logGroupName,\n                logStreamName: this._config.logStreamName\n              });\n            } else {\n              this._dataTracker.eventUploadInProgress = false;\n              throw err_5;\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._getBufferedBatchOfLogs = function () {\n    /**\n     * CloudWatch has restrictions on the size of the log events that get sent up.\n     * We need to track both the size of each event and the total size of the batch\n     * of logs.\n     *\n     * We also need to ensure that the logs in the batch are sorted in chronological order.\n     * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n     */\n    var currentEventIdx = 0;\n    var totalByteSize = 0;\n\n    while (currentEventIdx < this._dataTracker.logEvents.length) {\n      var currentEvent = this._dataTracker.logEvents[currentEventIdx];\n      var eventSize = currentEvent ? new TextEncoder().encode(currentEvent.message).length + AWS_CLOUDWATCH_BASE_BUFFER_SIZE : 0;\n\n      if (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {\n        var errString = \"Log entry exceeds maximum size for CloudWatch logs. Log size: \" + eventSize + \". Truncating log message.\";\n        logger.warn(errString);\n        currentEvent.message = currentEvent.message.substring(0, eventSize);\n      }\n\n      if (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE) break;\n      totalByteSize += eventSize;\n      currentEventIdx++;\n    }\n\n    this._currentLogBatch = this._dataTracker.logEvents.splice(0, currentEventIdx);\n    return this._currentLogBatch;\n  };\n\n  AWSCloudWatchProvider.prototype._getNewSequenceTokenAndSubmit = function (payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var seqToken, sendLogEventsRepsonse, err_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n\n            this._nextSequenceToken = '';\n            this._dataTracker.eventUploadInProgress = true;\n            return [4\n            /*yield*/\n            , this._getNextSequenceToken()];\n\n          case 1:\n            seqToken = _a.sent();\n            payload.sequenceToken = seqToken;\n            return [4\n            /*yield*/\n            , this._sendLogEvents(payload)];\n\n          case 2:\n            sendLogEventsRepsonse = _a.sent();\n            this._dataTracker.eventUploadInProgress = false;\n            this._currentLogBatch = [];\n            return [2\n            /*return*/\n            , sendLogEventsRepsonse];\n\n          case 3:\n            err_6 = _a.sent();\n            logger.error(\"error when retrying log submission with new sequence token: \" + err_6);\n            this._dataTracker.eventUploadInProgress = false;\n            throw err_6;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._initiateLogPushInterval = function () {\n    var _this = this;\n\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n\n    this._timer = setInterval(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var err_7;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 3,, 4]);\n\n              if (!this._getDocUploadPermissibility()) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , this._safeUploadLogEvents()];\n\n            case 1:\n              _a.sent();\n\n              _a.label = 2;\n\n            case 2:\n              return [3\n              /*break*/\n              , 4];\n\n            case 3:\n              err_7 = _a.sent();\n              logger.error(\"error when calling _safeUploadLogEvents in the timer interval - \" + err_7);\n              return [3\n              /*break*/\n              , 4];\n\n            case 4:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }, 2000);\n  };\n\n  AWSCloudWatchProvider.prototype._getDocUploadPermissibility = function () {\n    return (this._dataTracker.logEvents.length !== 0 || this._currentLogBatch.length !== 0) && !this._dataTracker.eventUploadInProgress;\n  };\n\n  AWSCloudWatchProvider.PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;\n  AWSCloudWatchProvider.CATEGORY = AWS_CLOUDWATCH_CATEGORY;\n  return AWSCloudWatchProvider;\n}();\n\nexport { AWSCloudWatchProvider };","map":{"version":3,"sources":["../../src/Providers/AWSCloudWatchProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport { CloudWatchLogsClient, CreateLogGroupCommand, CreateLogStreamCommand, DescribeLogGroupsCommand, DescribeLogStreamsCommand, GetLogEventsCommand, PutLogEventsCommand, } from '@aws-sdk/client-cloudwatch-logs';\nimport { Credentials } from '../..';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { getAmplifyUserAgent } from '../Platform';\nimport { parseMobileHubConfig } from '../Parser';\nimport { AWS_CLOUDWATCH_BASE_BUFFER_SIZE, AWS_CLOUDWATCH_CATEGORY, AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE, AWS_CLOUDWATCH_MAX_EVENT_SIZE, AWS_CLOUDWATCH_PROVIDER_NAME, NO_CREDS_ERROR_STRING, RETRY_ERROR_CODES, } from '../Util/Constants';\nvar logger = new Logger('AWSCloudWatch');\nvar AWSCloudWatchProvider = /** @class */ (function () {\n    function AWSCloudWatchProvider(config) {\n        this.configure(config);\n        this._dataTracker = {\n            eventUploadInProgress: false,\n            logEvents: [],\n        };\n        this._currentLogBatch = [];\n        this._initiateLogPushInterval();\n    }\n    AWSCloudWatchProvider.prototype.getProviderName = function () {\n        return AWSCloudWatchProvider.PROVIDER_NAME;\n    };\n    AWSCloudWatchProvider.prototype.getCategoryName = function () {\n        return AWSCloudWatchProvider.CATEGORY;\n    };\n    AWSCloudWatchProvider.prototype.getLogQueue = function () {\n        return this._dataTracker.logEvents;\n    };\n    AWSCloudWatchProvider.prototype.configure = function (config) {\n        if (!config)\n            return this._config || {};\n        var conf = Object.assign({}, this._config, parseMobileHubConfig(config).Logging, config);\n        this._config = conf;\n        return this._config;\n    };\n    AWSCloudWatchProvider.prototype.createLogGroup = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var cmd, credentialsOK, client, output, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('creating new log group in CloudWatch - ', params.logGroupName);\n                        cmd = new CreateLogGroupCommand(params);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 2:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            logger.error(NO_CREDS_ERROR_STRING);\n                            throw Error;\n                        }\n                        client = this._initCloudWatchLogs();\n                        return [4 /*yield*/, client.send(cmd)];\n                    case 3:\n                        output = _a.sent();\n                        return [2 /*return*/, output];\n                    case 4:\n                        error_1 = _a.sent();\n                        logger.error(\"error creating log group - \" + error_1);\n                        throw error_1;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype.getLogGroups = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var cmd, credentialsOK, client, output, error_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('getting list of log groups');\n                        cmd = new DescribeLogGroupsCommand(params);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 2:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            logger.error(NO_CREDS_ERROR_STRING);\n                            throw Error;\n                        }\n                        client = this._initCloudWatchLogs();\n                        return [4 /*yield*/, client.send(cmd)];\n                    case 3:\n                        output = _a.sent();\n                        return [2 /*return*/, output];\n                    case 4:\n                        error_2 = _a.sent();\n                        logger.error(\"error getting log group - \" + error_2);\n                        throw error_2;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype.createLogStream = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var cmd, credentialsOK, client, output, error_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('creating new log stream in CloudWatch - ', params.logStreamName);\n                        cmd = new CreateLogStreamCommand(params);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 2:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            logger.error(NO_CREDS_ERROR_STRING);\n                            throw Error;\n                        }\n                        client = this._initCloudWatchLogs();\n                        return [4 /*yield*/, client.send(cmd)];\n                    case 3:\n                        output = _a.sent();\n                        return [2 /*return*/, output];\n                    case 4:\n                        error_3 = _a.sent();\n                        logger.error(\"error creating log stream - \" + error_3);\n                        throw error_3;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype.getLogStreams = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var cmd, credentialsOK, client, output, error_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('getting list of log streams');\n                        cmd = new DescribeLogStreamsCommand(params);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 2:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            logger.error(NO_CREDS_ERROR_STRING);\n                            throw Error;\n                        }\n                        client = this._initCloudWatchLogs();\n                        return [4 /*yield*/, client.send(cmd)];\n                    case 3:\n                        output = _a.sent();\n                        return [2 /*return*/, output];\n                    case 4:\n                        error_4 = _a.sent();\n                        logger.error(\"error getting log stream - \" + error_4);\n                        throw error_4;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype.getLogEvents = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var cmd, credentialsOK, client, output, error_5;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('getting log events from stream - ', params.logStreamName);\n                        cmd = new GetLogEventsCommand(params);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 2:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            logger.error(NO_CREDS_ERROR_STRING);\n                            throw Error;\n                        }\n                        client = this._initCloudWatchLogs();\n                        return [4 /*yield*/, client.send(cmd)];\n                    case 3:\n                        output = _a.sent();\n                        return [2 /*return*/, output];\n                    case 4:\n                        error_5 = _a.sent();\n                        logger.error(\"error getting log events - \" + error_5);\n                        throw error_5;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype.pushLogs = function (logs) {\n        logger.debug('pushing log events to Cloudwatch...');\n        this._dataTracker.logEvents = __spread(this._dataTracker.logEvents, logs);\n    };\n    AWSCloudWatchProvider.prototype._validateLogGroupExistsAndCreate = function (logGroupName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, currGroups, foundGroups, err_1, errString;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this._dataTracker.verifiedLogGroup) {\n                            return [2 /*return*/, this._dataTracker.verifiedLogGroup];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 5, , 6]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 2:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            logger.error(NO_CREDS_ERROR_STRING);\n                            throw Error;\n                        }\n                        return [4 /*yield*/, this.getLogGroups({\n                                logGroupNamePrefix: logGroupName,\n                            })];\n                    case 3:\n                        currGroups = _a.sent();\n                        if (!(typeof currGroups === 'string') && currGroups.logGroups) {\n                            foundGroups = currGroups.logGroups.filter(function (group) { return group.logGroupName === logGroupName; });\n                            if (foundGroups.length > 0) {\n                                this._dataTracker.verifiedLogGroup = foundGroups[0];\n                                return [2 /*return*/, foundGroups[0]];\n                            }\n                        }\n                        /**\n                         * If we get to this point, it means that the specified log group does not exist\n                         * and we should create it.\n                         */\n                        return [4 /*yield*/, this.createLogGroup({ logGroupName: logGroupName })];\n                    case 4:\n                        /**\n                         * If we get to this point, it means that the specified log group does not exist\n                         * and we should create it.\n                         */\n                        _a.sent();\n                        return [2 /*return*/, null];\n                    case 5:\n                        err_1 = _a.sent();\n                        errString = \"failure during log group search: \" + err_1;\n                        logger.error(errString);\n                        throw err_1;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype._validateLogStreamExists = function (logGroupName, logStreamName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, currStreams, foundStreams, err_2, errString;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 4, , 5]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            logger.error(NO_CREDS_ERROR_STRING);\n                            throw Error;\n                        }\n                        return [4 /*yield*/, this.getLogStreams({\n                                logGroupName: logGroupName,\n                                logStreamNamePrefix: logStreamName,\n                            })];\n                    case 2:\n                        currStreams = _a.sent();\n                        if (currStreams.logStreams) {\n                            foundStreams = currStreams.logStreams.filter(function (stream) { return stream.logStreamName === logStreamName; });\n                            if (foundStreams.length > 0) {\n                                this._nextSequenceToken = foundStreams[0].uploadSequenceToken;\n                                return [2 /*return*/, foundStreams[0]];\n                            }\n                        }\n                        /**\n                         * If we get to this point, it means that the specified stream does not\n                         * exist, and we should create it now.\n                         */\n                        return [4 /*yield*/, this.createLogStream({\n                                logGroupName: logGroupName,\n                                logStreamName: logStreamName,\n                            })];\n                    case 3:\n                        /**\n                         * If we get to this point, it means that the specified stream does not\n                         * exist, and we should create it now.\n                         */\n                        _a.sent();\n                        return [2 /*return*/, null];\n                    case 4:\n                        err_2 = _a.sent();\n                        errString = \"failure during log stream search: \" + err_2;\n                        logger.error(errString);\n                        throw err_2;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype._sendLogEvents = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, cmd, client, output, err_3, errString;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 3, , 4]);\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            logger.error(NO_CREDS_ERROR_STRING);\n                            throw Error;\n                        }\n                        logger.debug('sending log events to stream - ', params.logStreamName);\n                        cmd = new PutLogEventsCommand(params);\n                        client = this._initCloudWatchLogs();\n                        return [4 /*yield*/, client.send(cmd)];\n                    case 2:\n                        output = _a.sent();\n                        return [2 /*return*/, output];\n                    case 3:\n                        err_3 = _a.sent();\n                        errString = \"failure during log push: \" + err_3;\n                        logger.error(errString);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype._initCloudWatchLogs = function () {\n        return new CloudWatchLogsClient({\n            region: this._config.region,\n            credentials: this._config.credentials,\n            customUserAgent: getAmplifyUserAgent(),\n            endpoint: this._config.endpoint,\n        });\n    };\n    AWSCloudWatchProvider.prototype._ensureCredentials = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()\n                            .then(function (credentials) {\n                            if (!credentials)\n                                return false;\n                            var cred = Credentials.shear(credentials);\n                            logger.debug('set credentials for logging', cred);\n                            _this._config.credentials = cred;\n                            return true;\n                        })\n                            .catch(function (error) {\n                            logger.warn('ensure credentials error', error);\n                            return false;\n                        })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype._getNextSequenceToken = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var logStream, err_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this._nextSequenceToken && this._nextSequenceToken.length > 0) {\n                            return [2 /*return*/, this._nextSequenceToken];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this._validateLogGroupExistsAndCreate(this._config.logGroupName)];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, this._validateLogStreamExists(this._config.logGroupName, this._config.logStreamName)];\n                    case 3:\n                        logStream = _a.sent();\n                        if (!logStream) {\n                            this._nextSequenceToken = '';\n                            return [2 /*return*/, ''];\n                        }\n                        this._nextSequenceToken = logStream.uploadSequenceToken || '';\n                        return [2 /*return*/, this._nextSequenceToken];\n                    case 4:\n                        err_4 = _a.sent();\n                        logger.error(\"failure while getting next sequence token: \" + err_4);\n                        throw err_4;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype._safeUploadLogEvents = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var seqToken, logBatch, putLogsPayload, sendLogEventsResponse, err_5;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 3, , 4]);\n                        return [4 /*yield*/, this._getNextSequenceToken()];\n                    case 1:\n                        seqToken = _a.sent();\n                        logBatch = this._currentLogBatch.length === 0\n                            ? this._getBufferedBatchOfLogs()\n                            : this._currentLogBatch;\n                        putLogsPayload = {\n                            logGroupName: this._config.logGroupName,\n                            logStreamName: this._config.logStreamName,\n                            logEvents: logBatch,\n                            sequenceToken: seqToken,\n                        };\n                        this._dataTracker.eventUploadInProgress = true;\n                        return [4 /*yield*/, this._sendLogEvents(putLogsPayload)];\n                    case 2:\n                        sendLogEventsResponse = _a.sent();\n                        this._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;\n                        this._dataTracker.eventUploadInProgress = false;\n                        this._currentLogBatch = [];\n                        return [2 /*return*/, sendLogEventsResponse];\n                    case 3:\n                        err_5 = _a.sent();\n                        logger.error(\"error during _safeUploadLogEvents: \" + err_5);\n                        if (RETRY_ERROR_CODES.includes(err_5.name)) {\n                            this._getNewSequenceTokenAndSubmit({\n                                logEvents: this._currentLogBatch,\n                                logGroupName: this._config.logGroupName,\n                                logStreamName: this._config.logStreamName,\n                            });\n                        }\n                        else {\n                            this._dataTracker.eventUploadInProgress = false;\n                            throw err_5;\n                        }\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype._getBufferedBatchOfLogs = function () {\n        /**\n         * CloudWatch has restrictions on the size of the log events that get sent up.\n         * We need to track both the size of each event and the total size of the batch\n         * of logs.\n         *\n         * We also need to ensure that the logs in the batch are sorted in chronological order.\n         * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n         */\n        var currentEventIdx = 0;\n        var totalByteSize = 0;\n        while (currentEventIdx < this._dataTracker.logEvents.length) {\n            var currentEvent = this._dataTracker.logEvents[currentEventIdx];\n            var eventSize = currentEvent\n                ? new TextEncoder().encode(currentEvent.message).length +\n                    AWS_CLOUDWATCH_BASE_BUFFER_SIZE\n                : 0;\n            if (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {\n                var errString = \"Log entry exceeds maximum size for CloudWatch logs. Log size: \" + eventSize + \". Truncating log message.\";\n                logger.warn(errString);\n                currentEvent.message = currentEvent.message.substring(0, eventSize);\n            }\n            if (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE)\n                break;\n            totalByteSize += eventSize;\n            currentEventIdx++;\n        }\n        this._currentLogBatch = this._dataTracker.logEvents.splice(0, currentEventIdx);\n        return this._currentLogBatch;\n    };\n    AWSCloudWatchProvider.prototype._getNewSequenceTokenAndSubmit = function (payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            var seqToken, sendLogEventsRepsonse, err_6;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 3, , 4]);\n                        this._nextSequenceToken = '';\n                        this._dataTracker.eventUploadInProgress = true;\n                        return [4 /*yield*/, this._getNextSequenceToken()];\n                    case 1:\n                        seqToken = _a.sent();\n                        payload.sequenceToken = seqToken;\n                        return [4 /*yield*/, this._sendLogEvents(payload)];\n                    case 2:\n                        sendLogEventsRepsonse = _a.sent();\n                        this._dataTracker.eventUploadInProgress = false;\n                        this._currentLogBatch = [];\n                        return [2 /*return*/, sendLogEventsRepsonse];\n                    case 3:\n                        err_6 = _a.sent();\n                        logger.error(\"error when retrying log submission with new sequence token: \" + err_6);\n                        this._dataTracker.eventUploadInProgress = false;\n                        throw err_6;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSCloudWatchProvider.prototype._initiateLogPushInterval = function () {\n        var _this = this;\n        if (this._timer) {\n            clearInterval(this._timer);\n        }\n        this._timer = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {\n            var err_7;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 3, , 4]);\n                        if (!this._getDocUploadPermissibility()) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._safeUploadLogEvents()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [3 /*break*/, 4];\n                    case 3:\n                        err_7 = _a.sent();\n                        logger.error(\"error when calling _safeUploadLogEvents in the timer interval - \" + err_7);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        }); }, 2000);\n    };\n    AWSCloudWatchProvider.prototype._getDocUploadPermissibility = function () {\n        return ((this._dataTracker.logEvents.length !== 0 ||\n            this._currentLogBatch.length !== 0) &&\n            !this._dataTracker.eventUploadInProgress);\n    };\n    AWSCloudWatchProvider.PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;\n    AWSCloudWatchProvider.CATEGORY = AWS_CLOUDWATCH_CATEGORY;\n    return AWSCloudWatchProvider;\n}());\nexport { AWSCloudWatchProvider };\n//# sourceMappingURL=AWSCloudWatchProvider.js.map"]},"metadata":{},"sourceType":"module"}